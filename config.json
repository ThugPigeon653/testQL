{
    "engines":{
            "postgres":{
                "host-os": "ubuntu-latest",
                "jobs":{
                    "test": {
                        "runs-on": "ubuntu-latest",
                        "steps": [
                                {
                                "name": "Set Environment Variables (postgres)",
                                "run": "echo \"SQL_SERVER=localhost\" >> $GITHUB_ENV\necho \"SQL_UID=postgres\" >> $GITHUB_ENV\necho \"SQL_PWD=mysecretpassword\" >> $GITHUB_ENV"
                                },
                                {
                                "name": "Checkout source",
                                "uses": "actions/checkout@v2"
                                },
                                {
                                "name": "Run postgres container",
                                "run": "docker run --name pgtestdb -e POSTGRES_PASSWORD=mysecretpassword -p 5432:5432 -d postgres\nsleep 20"
                                },
                                {
                                "name": "Setup py installation",
                                "uses": "actions/setup-python@v2",
                                "with": {
                                    "python-version": "3.x"
                                }
                                },
                                {
                                "name": "Install dependencies",
                                "run": "python -m pip install --upgrade pip\npip install psycopg2-binary"
                                },
                                {
                                "name": "PLpgSQL tests",
                                "run": "python -m unittest test/test_testQL_postgres.py"
                                }
                        ]
                    }
                },
                "db-config":[
                    "    @classmethod",
                    "    def setUpClass(cls):",
                    "        sql_server = os.getenv('SQL_SERVER')",
                    "        sql_uid = os.getenv('SQL_UID')",
                    "        sql_pwd = os.getenv('SQL_PWD')",
                    "        cls.connection = psycopg2.connect(",
                    "           host=sql_server,",
                    "           port=5432,",
                    "           database=sql_uid,",
                    "           user=sql_uid,",
                    "           password=sql_pwd,",
                    "        )",
                    "        cls.cursor = cls.connection.cursor()"
                ],
                "deps":[
                    "import psycopg2"
                ]
        },
            "tsql":{
                "host-os": "ubuntu-latest",
                "jobs":{
                    "tsql-test": {
                    "runs-on": "ubuntu-latest",
                    "steps": [
                        {
                        "name": "Run ms-sql container",
                        "run": "docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=StrongPword8' -p 1433:1433 -d mcr.microsoft.com/mssql/server:2022-latest"
                        },
                        {
                        "name": "Checkout source",
                        "uses": "actions/checkout@v2"
                        },
                        {
                        "name": "Setup py installation",
                        "uses": "actions/setup-python@v2",
                        "with": {
                            "python-version": "3.x"
                        }
                        },
                        {
                        "name": "Install ODBC Driver for SQL Server",
                        "run": "sudo apt-get install -y unixodbc-dev"
                        },
                        {
                        "name": "Wait",
                        "run": "sleep 20"
                        },
                        {
                        "name": "Set Environment Variables (TSQL)",
                        "run": "echo \"SQL_SERVER=localhost\" >> $GITHUB_ENV\necho \"SQL_DATABASE=master\" >> $GITHUB_ENV\necho \"SQL_UID=sa\" >> $GITHUB_ENV\necho \"SQL_PWD=StrongPword8\" >> $GITHUB_ENV"
                        },
                        {
                        "name": "Install dependencies",
                        "run": "python -m pip install --upgrade pip\npip install pyodbc"
                        },
                        {
                        "name": "TSQL Tests",
                        "run": "python -m unittest test/test_testQL_tsql.py"
                        },
                        {
                        "name": "Stop ms-sql container",
                        "run": "CONTAINER_ID=$(docker ps -q --filter ancestor=mcr.microsoft.com/mssql/server:2022-latest)\nif [ ! -z \"$CONTAINER_ID\" ]; then\ndocker stop $CONTAINER_ID\nfi"
                        }
                    ]
                }
                },
                "db-config":[
                    "    @classmethod",
                    "    def setUpClass(cls):",
                    "        sql_server = os.getenv('SQL_SERVER')",
                    "        sql_database = os.getenv('SQL_DATABASE')",
                    "        sql_uid = os.getenv('SQL_UID')",
                    "        sql_pwd = os.getenv('SQL_PWD')",
                    "        cls.connection = pyodbc.connect(",
                    "            f'Driver={{ODBC Driver 17 for SQL Server}};'",
                    "            f'Server={sql_server};'",
                    "            f'UID={sql_uid};'",
                    "            f'PWD={sql_pwd};'",
                    "            f'Database={sql_database};',",
                    "            timeout=30",
                    "        )",
                    "        cls.cursor = cls.connection.cursor()"
                ],
                "deps":[
                    "import pyodbc"
                ]
            },
            "mysql":{
                "host-os": "ubuntu-latest",
                "jobs":{
                    "mysql-test": {
                      "runs-on": "ubuntu-latest",
                      "steps": [
                        {
                          "name": "Set Environment Variables (MySQL)",
                          "run": [
                            "echo \"SQL_SERVER=localhost\" >> $GITHUB_ENV",
                            "echo \"SQL_UID=root\" >> $GITHUB_ENV",
                            "echo \"SQL_PWD=my-secret-pw\" >> $GITHUB_ENV",
                            "echo \"SQL_DATABASE=mysql-testQL\" >> $GITHUB_ENV"
                          ]
                        },
                        {
                          "name": "Checkout source",
                          "uses": "actions/checkout@v2"
                        },
                        {
                          "name": "Run mysql container",
                          "run": [
                            "docker pull mysql",
                            "docker run --name mysql-testQL -e MYSQL_ROOT_PASSWORD=my-secret-pw -p 3306:3306 -d mysql:latest",
                            "sleep 20",
                            "docker logs mysql-testQL"
                          ]
                        },
                        {
                          "name": "Setup py installation",
                          "uses": "actions/setup-python@v2",
                          "with": {
                            "python-version": "3.x"
                          }
                        },
                        {
                          "name": "Install dependencies",
                          "run": [
                            "python -m pip install --upgrade pip",
                            "pip install mysql-connector-python"
                          ]
                        },
                        {
                          "name": "MySQL tests",
                          "run": "python -m unittest test/test_mysql.py"
                        }
                      ]
                    }
                },
                "db-config":[
                    "    @classmethod",
                    "    def setUpClass(cls):",
                    "        sql_server = 'localhost'#os.getenv('SQL_SERVER')",
                    "        sql_database = 'mysql-testQL'#os.getenv('SQL_DATABASE')",
                    "        sql_uid = 'root'#os.getenv('SQL_UID')",
                    "        sql_pwd = 'my-secret-pw'#os.getenv('SQL_PWD')",
                    " ",
                    "        print('SQL_SERVER:', sql_server)",
                    "        print('SQL_DATABASE:', sql_database)",
                    "        print('SQL_UID:', sql_uid)",
                    "        print('SQL_PWD:', sql_pwd)",
                    "        cls.connection = mysql.connector.connect(",
                    "            host=sql_server,",
                    "            port=3306,",
                    "            user=sql_uid,",
                    "            password=sql_pwd",
                    "        )",
                    "        cls.cursor = cls.connection.cursor()"
                ],
                "deps":[
                    "import mysql.connector"
                ]
            }
    },
    "base-workflow": {
        "name": "testQL Tests",
        "on": {
            "push": {
                "branches": ["*"]
            }
        },
        "jobs": {}
    },
    "py-template":{
        "imports":[
            "from subprocess import Popen, PIPE",
            "import unittest",
            "import os",
            "import sys"
        ],
        "top":[
            "sys.path.insert(0, '.')",
            "class testSQL(unittest.TestCase):"
        ],
        "bottom": [
            "    @classmethod",
            "    def tearDownClass(cls):",
            "       cls.cursor.close()",
            "       cls.connection.close()",
            "    def execute_sql_file(self, sql_file_path, cursor, connection):",
            "       try:",
            "           with open(sql_file_path, 'r') as sql_file:",
            "               sql_script = sql_file.read()",
            "               cursor.execute(sql_script)",
            "               if not sql_script.strip().upper().startswith('SELECT'):",
            "                   connection.commit()",
            "           return True",
            "       except Exception as e:",
            "           print(f'Error executing SQL file {sql_file_path}: {str(e)}')",
            "           return False",
            " ",
            "    def test_tsql(self):",
            "       pass",
            "       # ADD YOUR UNIT TESTS HERE. i.e.",
            "       # self.assertTrue(self.execute_sql_file('Create.sql', self.cursor, self.connection))"
        ]
    }
          
}